/*Persistor class handles saving and loading the users data*/function Persister(){	this.applicationName = '';}Persister.prototype ={	// sets the application name that is used for the keychain	setApplicationName : function(name)	{		if (name && name.length > 0)		{			this.applicationName = name;			if (window.widget)			{				KeyChainAccess.setAppName(name);			}		}	},	// grab a standard preference	getPref : function(prefkey)	{		var foundVal = '';		if (window.widget)		{			foundVal = widget.preferenceForKey(this.createKey(prefkey));			if (!foundVal || (foundVal == "undefined"))			{				foundVal = "";			}		}		return foundVal;	},	// grab the password - uses keychain (requires KeyChainAccess plugin)	// note: moves old passwords over to the keychain	getPassword : function(username)	{		var password = '';		if (window.widget)		{			if (username != "")			{				// attempt to load the password from the keychain				if (this.applicationName.length > 0)				{					password = KeyChainAccess.loadPassword(username);				}				if (!password || (password == "undefined"))				{					password = "";					// if we couldn't find it in the keychain check to see if it's stored in the old preferences					password = widget.preferenceForKey(this.createKey("password"));					if (!password || (password == "undefined"))					{						password = "";					}					else					{						// need to move it out of the old preferences and into the keychain						this.saveUsernameAndPassword(username,password);						widget.setPreferenceForKey(this.createKey("password"),null);					}				}						}		}		return password;	},	// grab an array type preference	getListPref : function(key)	{		var foundVal = new Array();		if (window.widget)		{			// find the stored value			flat = widget.preferenceForKey(this.createKey(key));			if (flat && flat != "undefined")			{				// algorithm is -				// split string on single ','s (placing each bit into an array)				// replace ',,' with ',' in each item of the array				var delimiterSearch = new RegExp("(^|[^,]),($|[^,])", "gi");				var splitPoints = flat.match(delimiterSearch);				if (!splitPoints)				{					foundVal = new Array(flat);				}				else				{					var lastIndex = 0;					var splitIndex;					for (var i = 0; i < splitPoints.length; i++)					{						splitIndex = flat.indexOf(splitPoints[i],lastIndex) + splitPoints[i].indexOf(',');						foundVal.push(flat.slice(lastIndex,splitIndex));						lastIndex = splitIndex + 1;					}					foundVal.push(flat.slice(lastIndex,flat.length));				}				for (var i = 0; i < foundVal.length; i++)				{					foundVal[i] = foundVal[i].replace(/,,/g,",");				}			}		}		return foundVal;	},	// stores the given preference	storePref : function(key,val)	{		if (window.widget)		{			widget.setPreferenceForKey(val,this.createKey(key));		}	},	// store the password in the keychain	storePassword : function(username,password)	{		if (window.widget)		{			if (this.applicationName.length > 0)			{				KeyChainAccess.savePassword(username,password);			}		}	},	// stores an array type preference	storeListPref : function(pref,val)	{		if (window.widget)		{			// make our own copy of the list (cause we mess with it)			// todo: figure out how to make this copy			var valueList = val//.copy();			// convert the array to a string			for (var i = 0; i < valueList.length; i++)			{				valueList[i] = valueList[i].replace(/,/g,",,");			}			var flat = valueList.join(',');			// store the string			widget.setPreferenceForKey(flat,this.createKey(pref));		}	},	// clear the preferences	destroyPreferences : function(prefs)	{		if (window.widget)		{			for (var i = 0; i < prefs.length; i++)			{				widget.setPreferenceForKey(null, this.createKey(prefs[i]));			}		}	},	// creates a unique key for each preference of each widget	createKey : function(key)	{		if (window.widget)		{			return widget.identifier + "-" + key;		}		else		{			return key;		}	}}